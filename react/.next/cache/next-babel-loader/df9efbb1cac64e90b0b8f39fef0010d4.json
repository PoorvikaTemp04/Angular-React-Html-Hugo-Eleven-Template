{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\n/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup } from 'reactstrap';\n\nvar ModalExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalExample, _React$Component);\n\n  function ModalExample(props) {\n    var _this;\n\n    _classCallCheck(this, ModalExample);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalExample).call(this, props));\n    _this.state = {\n      modal: false,\n      unmountOnClose: true\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    _this.changeUnmountOnClose = _this.changeUnmountOnClose.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ModalExample, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState(function (prevState) {\n        return {\n          modal: !prevState.modal\n        };\n      });\n    }\n  }, {\n    key: \"changeUnmountOnClose\",\n    value: function changeUnmountOnClose(e) {\n      var value = e.target.value;\n      this.setState({\n        unmountOnClose: JSON.parse(value)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Form, {\n        inline: true,\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        }\n      }, __jsx(FormGroup, null, __jsx(Label, {\n        for: \"unmountOnClose\"\n      }, \"UnmountOnClose value\"), ' ', __jsx(Input, {\n        type: \"select\",\n        name: \"unmountOnClose\",\n        id: \"unmountOnClose\",\n        onChange: this.changeUnmountOnClose\n      }, __jsx(\"option\", {\n        value: \"true\"\n      }, \"true\"), __jsx(\"option\", {\n        value: \"false\"\n      }, \"false\"))), ' ', __jsx(Button, {\n        color: \"danger\",\n        onClick: this.toggle\n      }, this.props.buttonLabel)), __jsx(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        className: this.props.className,\n        unmountOnClose: this.state.unmountOnClose\n      }, __jsx(ModalHeader, {\n        toggle: this.toggle\n      }, \"Modal title\"), __jsx(ModalBody, null, __jsx(Input, {\n        type: \"textarea\",\n        placeholder: \"Write something (data should remain in modal if unmountOnClose is set to false)\",\n        rows: 5\n      })), __jsx(ModalFooter, null, __jsx(Button, {\n        color: \"primary\",\n        onClick: this.toggle\n      }, \"Do Something\"), ' ', __jsx(Button, {\n        color: \"secondary\",\n        onClick: this.toggle\n      }, \"Cancel\"))));\n    }\n  }]);\n\n  return ModalExample;\n}(React.Component);\n\nexport default ModalExample;","map":null,"metadata":{},"sourceType":"module"}