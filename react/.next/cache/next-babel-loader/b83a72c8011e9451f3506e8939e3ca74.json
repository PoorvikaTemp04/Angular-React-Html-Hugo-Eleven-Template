{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createContext, useContext, useEffect, useReducer } from \"react\";\nvar Context = createContext();\nvar Provider = Context.Provider;\nvar mql;\n\nvar saveToLocal = function saveToLocal(state) {\n  var stateCopy = _objectSpread({}, state);\n\n  delete stateCopy.mobile;\n  localStorage.setItem(\"settings\", _JSON$stringify(stateCopy));\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"toggleFullscreen\":\n      {\n        var element = document.querySelector(\"#__next\");\n        var isFullscreen = document.webkitIsFullScreen || document.mozFullScreen || false;\n\n        element.requestFullScreen = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || function () {\n          return false;\n        };\n\n        document.cancelFullScreen = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || function () {\n          return false;\n        };\n\n        isFullscreen ? document.cancelFullScreen() : element.requestFullScreen();\n        return _objectSpread({}, state, {\n          fullscreen: !isFullscreen\n        });\n      }\n\n    case \"toggleBoxed\":\n      {\n        var newState = _objectSpread({}, state, {\n          boxed: !state.boxed\n        });\n\n        saveToLocal(newState);\n        return newState;\n      }\n\n    case \"toggleCollapsed\":\n      {\n        var _newState = _objectSpread({}, state, {\n          collapsed: !state.collapsed\n        });\n\n        saveToLocal(_newState);\n        return _newState;\n      }\n\n    case \"toggleDarkMode\":\n      {\n        var _newState2 = _objectSpread({}, state, {\n          darkMode: !state.darkMode\n        });\n\n        saveToLocal(_newState2);\n        return _newState2;\n      }\n\n    case \"toggleStickyHeader\":\n      {\n        var _newState3 = _objectSpread({}, state, {\n          stickyHeader: !state.stickyHeader\n        });\n\n        saveToLocal(_newState3);\n        return _newState3;\n      }\n\n    case \"toggleStickySidebar\":\n      {\n        var _newState4 = _objectSpread({}, state, {\n          stickySidebar: !state.stickySidebar\n        });\n\n        saveToLocal(_newState4);\n        return _newState4;\n      }\n\n    case \"toggleTopHeader\":\n      {\n        var _newState5 = _objectSpread({}, state, {\n          topHeader: !state.topHeader\n        });\n\n        saveToLocal(_newState5);\n        return _newState5;\n      }\n\n    case \"setMobile\":\n      return _objectSpread({}, state, {\n        mobile: !mql.matches\n      });\n\n    case \"initialSetup\":\n      {\n        var settings = JSON.parse(localStorage.getItem(\"settings\"));\n        return _objectSpread({}, state, {\n          mobile: !mql.matches\n        }, settings);\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar AppProvider = function AppProvider(props) {\n  var _useReducer = useReducer(reducer, {\n    name: \"Eleven\",\n    mobile: false,\n    boxed: false,\n    darkMode: false,\n    stickyHeader: false,\n    stickySidebar: true,\n    collapsed: false,\n    topHeader: false,\n    fullscreen: false\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  useEffect(function () {\n    mql = window.matchMedia(\"(min-width: 992px)\");\n    mql.addListener(mediaQueryChanged);\n    dispatch({\n      type: \"initialSetup\"\n    });\n    return function () {\n      return mql.removeListener(mediaQueryChanged);\n    };\n  }, []);\n\n  var mediaQueryChanged = function mediaQueryChanged() {\n    dispatch({\n      type: \"setMobile\"\n    });\n  };\n\n  return __jsx(Provider, {\n    value: [state, dispatch]\n  }, props.children);\n};\n\nexport default AppProvider;\nexport var useAppState = function useAppState() {\n  return useContext(Context);\n};","map":null,"metadata":{},"sourceType":"module"}