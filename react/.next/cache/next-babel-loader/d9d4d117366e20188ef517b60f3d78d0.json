{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Badge, Collapse, Nav, NavItem, NavLink } from \"reactstrap\";\nimport AnimatedIcon from \"./AnimatedIcon\";\nimport Chevron from \"../../public/animated-icons/expand/expand.json\";\nimport Link from \"next/link\";\nimport { capitalize } from \"../../lib/helpers\";\nimport { useEffect } from \"react\";\nimport useHover from \"./UseHover\";\n\nvar SidebarItem = function SidebarItem(_ref) {\n  var currentPath = _ref.currentPath,\n      activeRoute = _ref.activeRoute,\n      path = _ref.path,\n      index = _ref.index,\n      route = _ref.route,\n      toggleMenu = _ref.toggleMenu,\n      pathname = _ref.pathname;\n  var hasChildren = route.children ? true : false;\n\n  var _useHover = useHover(),\n      _useHover2 = _slicedToArray(_useHover, 2),\n      ref = _useHover2[0],\n      hovered = _useHover2[1];\n\n  var iconSize = 18;\n  useEffect(function () {\n    if (!currentPath || activeRoute === index || route.path === \"/\") return;\n    toggleMenu(index);\n  }, []);\n\n  var badgeTemplate = function badgeTemplate(badge) {\n    return __jsx(Badge, {\n      color: badge.type ? badge.type : \"default\",\n      pill: true\n    }, badge.value);\n  };\n\n  return __jsx(\"div\", {\n    className: \"sidebar-item\",\n    ref: ref\n  }, __jsx(NavItem, {\n    key: index,\n    className: activeRoute === index ? \"active\" : \"\"\n  }, __jsx(React.Fragment, null, !hasChildren && __jsx(Link, {\n    href: \"\".concat(route.path),\n    as: \"\".concat(route.path.indexOf(\"//\") !== -1 ? \"\" : process.env.baseUrl).concat(route.path.replace(\"/\", \"\")),\n    passHref: true\n  }, __jsx(NavLink, {\n    onClick: function onClick() {\n      return toggleMenu(index);\n    },\n    className: \"d-flex align-items-center\"\n  }, __jsx(AnimatedIcon, {\n    animationData: route.icon,\n    size: iconSize,\n    isStopped: !hovered\n  }), __jsx(\"span\", {\n    className: \"mr-auto menu-name\"\n  }, capitalize(route.name)), route.badge && badgeTemplate(route.badge))), hasChildren && __jsx(NavLink, {\n    className: \"nav-link d-flex align-items-center\",\n    onClick: function onClick() {\n      return toggleMenu(index);\n    }\n  }, __jsx(AnimatedIcon, {\n    animationData: route.icon,\n    size: iconSize,\n    isStopped: !hovered\n  }), __jsx(\"span\", {\n    className: \"mr-auto menu-name\"\n  }, capitalize(route.name)), route.badge && badgeTemplate(route.badge), hasChildren && __jsx(\"span\", {\n    className: \"caret  \".concat(activeRoute === index ? \"caret-active\" : \"\")\n  }, __jsx(AnimatedIcon, {\n    animationData: Chevron,\n    size: 12\n  })))), hasChildren && __jsx(Collapse, {\n    isOpen: activeRoute === index ? true : false,\n    className: \"sub-menu\"\n  }, __jsx(Nav, {\n    vertical: true\n  }, route.children.map(function (subitem, index) {\n    return __jsx(NavItem, {\n      key: index,\n      className: pathname === route.path + subitem.path ? \"active\" : \"\"\n    }, __jsx(Link, {\n      href: \"\".concat(route.path ? route.path : \"\").concat(subitem.path ? subitem.path : \"\"),\n      as: \"\".concat(subitem.path.indexOf(\"//\") !== -1 ? \"\" : process.env.baseUrl).concat(route.path ? route.path.replace(\"/\", \"\") : \"\").concat(subitem.path ? subitem.path : \"\"),\n      passHref: true\n    }, __jsx(NavLink, null, __jsx(\"span\", {\n      className: \"mr-auto menu-name\"\n    }, capitalize(subitem.name)), subitem.badge && badgeTemplate(subitem.badge))));\n  })))));\n};\n\nexport default SidebarItem;","map":null,"metadata":{},"sourceType":"module"}