{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport lottie from \"lottie-web\";\nimport lottieApi from \"lottie-api/dist/lottie_api\";\n\nvar Lottie =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Lottie, _React$Component);\n\n  function Lottie() {\n    _classCallCheck(this, Lottie);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Lottie).apply(this, arguments));\n  }\n\n  _createClass(Lottie, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          options = _this$props.options,\n          eventListeners = _this$props.eventListeners;\n      var loop = options.loop,\n          autoplay = options.autoplay,\n          animationData = options.animationData,\n          rendererSettings = options.rendererSettings,\n          segments = options.segments;\n      this.options = {\n        container: this.el,\n        renderer: \"svg\",\n        loop: loop !== false,\n        autoplay: autoplay !== false,\n        segments: segments !== false,\n        animationData: animationData,\n        rendererSettings: rendererSettings\n      };\n      this.options = _objectSpread({}, this.options, {}, options);\n      this.anim = lottie.loadAnimation(this.options);\n      this.setSpeed();\n      this.setDirection();\n      this.animApi = lottieApi.createAnimationApi(this.anim);\n      this.registerEvents(eventListeners);\n      this.setAnimationControl();\n    }\n  }, {\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(nextProps\n    /* , nextState */\n    ) {\n      /* Recreate the animation handle if the data is changed */\n      if (this.options.animationData !== nextProps.options.animationData) {\n        this.deRegisterEvents(this.props.eventListeners);\n        this.destroy();\n        this.options = _objectSpread({}, this.options, {}, nextProps.options);\n        this.anim = lottie.loadAnimation(this.options);\n        this.animApi = lottieApi.createAnimationApi(this.anim);\n        this.registerEvents(nextProps.eventListeners);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.isStopped) {\n        this.stop();\n      } else if (this.props.segments) {\n        var shouldForce = !!this.props.forceSegments;\n        this.playSegments(shouldForce);\n      } else {\n        this.play();\n      }\n\n      this.setAnimationControl();\n      this.pause();\n      this.setSpeed();\n      this.setDirection();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deRegisterEvents(this.props.eventListeners);\n      this.destroy();\n      this.options.animationData = null;\n      this.anim = null;\n      this.animApi = null;\n    }\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed() {\n      this.anim.setSpeed(this.props.speed);\n    }\n  }, {\n    key: \"setDirection\",\n    value: function setDirection() {\n      this.anim.setDirection(this.props.direction);\n    }\n  }, {\n    key: \"setAnimationControl\",\n    value: function setAnimationControl() {\n      var _this = this;\n\n      var animationControl = this.props.animationControl;\n\n      if (animationControl) {\n        var properties = _Object$keys(animationControl);\n\n        properties.forEach(function (property) {\n          var propertyPath = _this.animApi.getKeyPath(property);\n\n          var value = animationControl[property];\n\n          _this.animApi.addValueCallback(propertyPath, function () {\n            return value;\n          });\n        });\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.anim.play();\n    }\n  }, {\n    key: \"playSegments\",\n    value: function playSegments(shouldForce) {\n      this.anim.playSegments(this.props.segments, shouldForce);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.anim.stop();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.props.isPaused && !this.anim.isPaused) {\n        this.anim.pause();\n      } else if (!this.props.isPaused && this.anim.isPaused) {\n        this.anim.pause();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.anim.destroy();\n    }\n  }, {\n    key: \"registerEvents\",\n    value: function registerEvents(eventListeners) {\n      var _this2 = this;\n\n      eventListeners.forEach(function (eventListener) {\n        _this2.anim.addEventListener(eventListener.eventName, eventListener.callback);\n      });\n    }\n  }, {\n    key: \"deRegisterEvents\",\n    value: function deRegisterEvents(eventListeners) {\n      var _this3 = this;\n\n      eventListeners.forEach(function (eventListener) {\n        _this3.anim.removeEventListener(eventListener.eventName, eventListener.callback);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height,\n          ariaRole = _this$props2.ariaRole,\n          ariaLabel = _this$props2.ariaLabel,\n          title = _this$props2.title;\n\n      var getSize = function getSize(initial) {\n        var size;\n\n        if (typeof initial === \"number\") {\n          size = \"\".concat(initial, \"px\");\n        } else {\n          size = initial || \"100%\";\n        }\n\n        return size;\n      };\n\n      var lottieStyles = _objectSpread({\n        width: getSize(width),\n        height: getSize(height),\n        overflow: \"hidden\",\n        margin: \"0 auto\",\n        outline: \"none\"\n      }, this.props.style);\n\n      return (// Bug with eslint rules https://github.com/airbnb/javascript/issues/1374\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        __jsx(\"div\", {\n          ref: function ref(c) {\n            _this4.el = c;\n          },\n          style: lottieStyles,\n          title: title,\n          role: ariaRole,\n          \"aria-label\": ariaLabel,\n          tabIndex: \"0\"\n        })\n      );\n    }\n  }]);\n\n  return Lottie;\n}(React.Component);\n\nexport { Lottie as default };\nLottie.defaultProps = {\n  eventListeners: [],\n  isStopped: false,\n  isPaused: false,\n  speed: 1,\n  ariaRole: \"button\",\n  ariaLabel: \"animation\",\n  title: \"\"\n};","map":null,"metadata":{},"sourceType":"module"}